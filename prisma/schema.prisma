// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  questionGroups      QuestionGroup[]
  rooms               Room[]
  sharedGroups        GroupsUsers[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuestionGroup {
  id           String   @id @default(cuid())
  name         String   @db.VarChar(50)
  creationDate DateTime
  updateDate   DateTime
  version      Int
  questions    Question[]
  authorId     String
  author       User     @relation(fields: [authorId], references: [id])
  rooms        Room[]
  sharedUsers  GroupsUsers[]

  @@unique([name, authorId])
}

model Question {
  id           String   @id @default(cuid())
  title        String?  @db.VarChar(100)
  subject      String
  groupId      String
  order        Int
  group        QuestionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  responses    Response[]
  answers      Answer[]
}

model Response {
  id           String   @id @default(cuid())
  text         String   @db.VarChar(550)
  questionId   String
  question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isCorrect    Boolean
  choices      Choices[]
}

model Room {
  id                String   @id @default(cuid())
  groupId           String
  group             QuestionGroup @relation(fields: [groupId], references: [id])
  userId            String
  user              User @relation(fields: [userId], references: [id])
  shareLink         String?
  score             Int?
  successCount      Int?
  failedCount       Int?
  mode              RoomMode
  dateStart         DateTime?
  dateEnd           DateTime?
  withRetry         Int?
  withRandom        Boolean
  withCorrection    Boolean
  withResults       Boolean
  withProgress      Boolean
  answers           Answer[]
}

model Answer {
  id               String   @id @default(cuid())
  roomId           String
  room             Room @relation(fields: [roomId], references: [id])
  questionId       String?
  question         Question? @relation(fields: [questionId], references: [id])
  dateStart        DateTime
  dateEnd          DateTime?
  order            Int
  achievement      Int?
  choices          Choices[]
}

model Choices{
  answerId        String
  answer          Answer @relation(fields: [answerId], references: [id])
  responseId      String
  response        Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@id([answerId, responseId])
}

model GroupsUsers{
  groupId        String
  group          QuestionGroup @relation(fields: [groupId], references: [id])
  userId         String
  user           User @relation(fields: [userId], references: [id])

  @@id([groupId, userId])
}

model Images{
  id              String   @id @default(cuid())
  name            String
  filetype        String
  base64          String
  hash            String
  createdDate     DateTime
  authorId        String
}

enum RoomMode {
  Training
  Rating
}
